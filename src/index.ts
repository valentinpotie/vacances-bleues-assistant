import express, { Request, Response } from "express";
import bodyParser from "body-parser";
import WebSocket from "ws";
import OpenAI from "openai";
import "dotenv/config";
import fs from "fs/promises";
import path from "path";

const PORT = Number(process.env.PORT ?? 8000);
const WEBHOOK_SECRET = process.env.OPENAI_WEBHOOK_SECRET;
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;

if (!WEBHOOK_SECRET || !OPENAI_API_KEY) {
  console.error("Missing OPENAI_WEBHOOK_SECRET or OPENAI_API_KEY in .env");
  process.exit(1);
}

const app = express();
app.use(bodyParser.raw({ type: "*/*" }));

const client = new OpenAI({ apiKey: OPENAI_API_KEY });

const callAccept = {
    instructions: `Tu es un assistant de r√©servation pour la cha√Æne d'h√¥tels Vacances Bleues.

    Ton r√¥le est d'aider les clients √† r√©server des chambres d'h√¥tel de mani√®re chaleureuse et professionnelle.

    IMPORTANT: Tu dois TOUJOURS parler en fran√ßais.

    Processus de r√©servation:
    1. Accueille chaleureusement le client
    2. Demande les dates d'arriv√©e et de d√©part souhait√©es
    3. Demande le nombre de personnes
    4. Propose les types de chambres disponibles selon les besoins
    5. Collecte les informations personnelles (nom, pr√©nom, t√©l√©phone, email)
    6. Demande s'il y a des demandes sp√©ciales
    7. R√©capitule la r√©servation
    8. Confirme la r√©servation en utilisant la fonction create_reservation

    Types de chambres disponibles:
    - Chambre Standard (2 personnes) - √Ä partir de 89‚Ç¨/nuit
    - Chambre Familiale (4 personnes) - √Ä partir de 139‚Ç¨/nuit
    - Suite Vue Mer (2 personnes) - √Ä partir de 179‚Ç¨/nuit

    Sois naturel, sympathique et efficace. Pose une question √† la fois pour ne pas submerger le client.`,
    type: "realtime",
    model: "gpt-realtime",
    audio: {
      output: { voice: "alloy" },
    },
    tools: [
      {
        type: "function",
        name: "create_reservation",
        description: "Cr√©e une r√©servation d'h√¥tel dans le syst√®me Vacances Bleues",
        parameters: {
          type: "object",
          properties: {
            nom: {
              type: "string",
              description: "Nom de famille du client"
            },
            prenom: {
              type: "string",
              description: "Pr√©nom du client"
            },
            email: {
              type: "string",
              description: "Adresse email du client"
            },
            telephone: {
              type: "string",
              description: "Num√©ro de t√©l√©phone du client"
            },
            date_arrivee: {
              type: "string",
              description: "Date d'arriv√©e au format YYYY-MM-DD"
            },
            date_depart: {
              type: "string",
              description: "Date de d√©part au format YYYY-MM-DD"
            },
            type_chambre: {
              type: "string",
              enum: ["standard", "familiale", "suite_vue_mer"],
              description: "Type de chambre r√©serv√©e"
            },
            nombre_personnes: {
              type: "number",
              description: "Nombre de personnes pour la r√©servation"
            },
            demandes_speciales: {
              type: "string",
              description: "Demandes ou besoins sp√©ciaux du client (optionnel)"
            }
          },
          required: ["nom", "prenom", "email", "telephone", "date_arrivee", "date_depart", "type_chambre", "nombre_personnes"]
        }
      },
      {
        type: "function",
        name: "check_availability",
        description: "V√©rifie la disponibilit√© des chambres pour des dates donn√©es",
        parameters: {
          type: "object",
          properties: {
            date_arrivee: {
              type: "string",
              description: "Date d'arriv√©e au format YYYY-MM-DD"
            },
            date_depart: {
              type: "string",
              description: "Date de d√©part au format YYYY-MM-DD"
            },
            type_chambre: {
              type: "string",
              enum: ["standard", "familiale", "suite_vue_mer"],
              description: "Type de chambre √† v√©rifier"
            }
          },
          required: ["date_arrivee", "date_depart", "type_chambre"]
        }
      }
    ]
} as const;

const WELCOME_GREETING = "Bonjour et bienvenue chez Vacances Bleues ! Je suis votre assistant de r√©servation. Comment puis-je vous aider aujourd'hui ?";

const responseCreate = {
  type: "response.create",
  response: {
    instructions: `Say to the user: ${WELCOME_GREETING}`,
  },
} as const;

const RealtimeIncomingCall = "realtime.call.incoming" as const;

// Interfaces pour les r√©servations
interface Reservation {
  id: string;
  nom: string;
  prenom: string;
  email: string;
  telephone: string;
  date_arrivee: string;
  date_depart: string;
  type_chambre: string;
  nombre_personnes: number;
  demandes_speciales?: string;
  date_creation: string;
}

// Stockage en m√©moire des r√©servations (pour demo)
const reservations: Reservation[] = [];

// Chemin du fichier de sauvegarde des r√©servations
const RESERVATIONS_FILE = path.join(process.cwd(), "reservations.json");

// Charger les r√©servations existantes au d√©marrage
async function loadReservations() {
  try {
    const data = await fs.readFile(RESERVATIONS_FILE, "utf-8");
    const loaded = JSON.parse(data);
    reservations.push(...loaded);
    console.log(`üìö ${loaded.length} r√©servation(s) charg√©e(s) depuis le fichier`);
  } catch (error) {
    console.log("üìù Aucune r√©servation existante, cr√©ation d'un nouveau fichier");
  }
}

// Sauvegarder les r√©servations dans un fichier
async function saveReservations() {
  try {
    await fs.writeFile(RESERVATIONS_FILE, JSON.stringify(reservations, null, 2), "utf-8");
    console.log("üíæ R√©servations sauvegard√©es");
  } catch (error) {
    console.error("‚ùå Erreur lors de la sauvegarde:", error);
  }
}

// Fonction pour v√©rifier la disponibilit√©
function checkAvailability(date_arrivee: string, date_depart: string, type_chambre: string): { available: boolean; message: string } {
  // Pour la d√©mo, on simule la disponibilit√©
  // Dans un vrai syst√®me, vous interrogeriez votre base de donn√©es
  const available = true; // Toujours disponible pour la d√©mo

  if (available) {
    return {
      available: true,
      message: `Excellente nouvelle ! Nous avons des chambres ${type_chambre} disponibles du ${date_arrivee} au ${date_depart}.`
    };
  } else {
    return {
      available: false,
      message: `D√©sol√©, nous n'avons plus de chambres ${type_chambre} disponibles pour ces dates.`
    };
  }
}

// Fonction pour cr√©er une r√©servation
async function createReservation(params: Omit<Reservation, 'id' | 'date_creation'>): Promise<{ success: boolean; reservation?: Reservation; message: string }> {
  try {
    const reservation: Reservation = {
      id: `RES-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      ...params,
      date_creation: new Date().toISOString()
    };

    reservations.push(reservation);
    await saveReservations(); // Sauvegarder imm√©diatement

    console.log('üìÖ Nouvelle r√©servation cr√©√©e:', reservation);

    return {
      success: true,
      reservation,
      message: `Parfait ! Votre r√©servation est confirm√©e sous le num√©ro ${reservation.id}. Un email de confirmation sera envoy√© √† ${params.email}.`
    };
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation de la r√©servation:', error);
    return {
      success: false,
      message: "D√©sol√©, une erreur s'est produite lors de la cr√©ation de votre r√©servation. Veuillez r√©essayer."
    };
  }
}

const websocketTask = async (uri: string): Promise<void> => {

  const ws = new WebSocket(uri, {
    headers: {
      Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
      origin: "https://api.openai.com",
    },
  });

  ws.on("open", () => {
    console.log(`üîå WebSocket connect√©: ${uri}`);
    ws.send(JSON.stringify(responseCreate));
  });

  ws.on("message", (data) => {
    const text = typeof data === "string" ? data : data.toString("utf8");

    try {
      const event = JSON.parse(text);

      // G√©rer les appels de fonction
      if (event.type === "response.function_call_arguments.done") {
        console.log('üìû Appel de fonction d√©tect√©:', event.name);

        const functionName = event.name;
        const args = JSON.parse(event.arguments);

        (async () => {
          let functionResponse;

          if (functionName === "check_availability") {
            functionResponse = checkAvailability(
              args.date_arrivee,
              args.date_depart,
              args.type_chambre
            );
          } else if (functionName === "create_reservation") {
            functionResponse = await createReservation(args);
          }

          // Envoyer la r√©ponse de la fonction √† OpenAI
          if (functionResponse) {
            const functionOutput = {
              type: "conversation.item.create",
              item: {
                type: "function_call_output",
                call_id: event.call_id,
                output: JSON.stringify(functionResponse)
              }
            };

            ws.send(JSON.stringify(functionOutput));

            // Demander √† l'assistant de continuer
            ws.send(JSON.stringify({ type: "response.create" }));
          }
        })();
      }

      // Logger d'autres √©v√©nements importants
      if (event.type === "conversation.item.created") {
        console.log('üí¨ Nouvelle interaction:', event.item?.type);
      }

    } catch (e) {
      // Si ce n'est pas du JSON, ce n'est pas grave
    }
  });

  ws.on("error", (e) => {
    console.error("‚ùå Erreur WebSocket:", JSON.stringify(e));
  });

  ws.on("close", (code, reason) => {
    console.log("üîå WebSocket ferm√©:", code, reason?.toString?.());
    console.log(`üìä Nombre total de r√©servations: ${reservations.length}`);
  });
}

const connectWithDelay = async (sipWssUrl: string, delay: number = 1000): Promise<void> => {

  try{
    setTimeout(async () => await websocketTask(sipWssUrl), delay );
  }catch(e){
    console.error(`Error connecting web socket ${e}`);
  }
  
}

app.get("/health", async (req: Request, res: Response ) => {
  return res.status(200).send(`Health ok`);
});

// Endpoint pour consulter les r√©servations
app.get("/reservations", async (req: Request, res: Response) => {
  return res.status(200).json({
    total: reservations.length,
    reservations: reservations
  });
});

// Endpoint pour obtenir une r√©servation sp√©cifique
app.get("/reservations/:id", async (req: Request, res: Response) => {
  const reservation = reservations.find(r => r.id === req.params.id);
  if (reservation) {
    return res.status(200).json(reservation);
  } else {
    return res.status(404).json({ error: "R√©servation non trouv√©e" });
  }
});

app.post("/", async (req: Request, res: Response) => {

  try {
    const event = await client.webhooks.unwrap(
      req.body.toString("utf8"),
      req.headers as Record<string, string>,
      WEBHOOK_SECRET
    );

    const type = (event as any)?.type;

    if (type === RealtimeIncomingCall) {
      const callId: string = (event as any)?.data?.call_id;


      // Accept the Call 
      const resp = await fetch(
        `https://api.openai.com/v1/realtime/calls/${encodeURIComponent(callId)}/accept`,
        {
          method: "POST",
          headers: {
            Authorization: `Bearer ${OPENAI_API_KEY}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify(callAccept),
        }
      );

      if (!resp.ok) {
        const text = await resp.text().catch(() => "");
        console.error("ACCEPT failed:", resp.status, resp.statusText, text);
        return res.status(500).send("Accept failed");
      }


      // Connect the web socket after a short delay
      const wssUrl = `wss://api.openai.com/v1/realtime?call_id=${callId}`
      await connectWithDelay(wssUrl, 0); // lengthen delay if needed

      // Acknowledge the webhook
      res.set("Authorization", `Bearer ${OPENAI_API_KEY}`);
      return res.sendStatus(200);
    }

    return res.sendStatus(200);

  } catch (e: any) {
    const msg = String(e?.message ?? "");
    if (e?.name === "InvalidWebhookSignatureError" || msg.toLowerCase().includes("invalid signature")) {
      return res.status(400).send("Invalid signature");
    }
    return res.status(500).send("Server error");
  }
});

// D√©marrer le serveur
app.listen(PORT, async () => {
  console.log(`üöÄ Serveur d√©marr√© sur http://localhost:${PORT}`);
  console.log(`üìû Assistant de r√©servation Vacances Bleues pr√™t !`);
  await loadReservations();
  console.log(`\nüìã Endpoints disponibles:`);
  console.log(`   GET  /health - V√©rifier le statut du serveur`);
  console.log(`   GET  /reservations - Consulter toutes les r√©servations`);
  console.log(`   GET  /reservations/:id - Consulter une r√©servation sp√©cifique`);
  console.log(`   POST / - Webhook OpenAI (pour les appels entrants)\n`);
});
